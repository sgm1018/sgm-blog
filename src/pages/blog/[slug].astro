---
import type { GetStaticPaths } from 'astro';
import type { BlogPost } from '../../types/blog.types';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostHeader from '../../components/blog/PostHeader.astro';
import PostContent from '../../components/blog/PostContent.astro';
import PostFooter from '../../components/blog/PostFooter.astro';
import PostNavigation from '../../components/blog/PostNavigation.astro';
import RelatedPosts from '../../components/blog/RelatedPosts.astro';
import TableOfContents from '../../components/blog/TableOfContents.astro';
import ReadingProgress from '../../components/blog/ReadingProgress.astro';
import Comments from '../../components/blog/Comments.astro';
import BackToTop from '../../components/blog/BackToTop.astro';
import { BlogService } from '../../lib/blog-service';

export const getStaticPaths: GetStaticPaths = async () => {
  try {
    const posts = await BlogService.getPublishedPosts();

    return posts.map((post) => ({
      params: { slug: post.slug },
      props: { post },
    }));
  } catch (error) {
    console.error('Error fetching posts for static paths:', error);
    return [];
  }
};

const { post } = Astro.props as { post: BlogPost };

if (!post) {
  return Astro.redirect('/404');
}

// Generar structured data para SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.title,
  "description": post.excerpt,
  "image": post.featuredImage,
  "author": {
    "@type": "Person",
    "name": post.author.name,
  },
  "publisher": {
    "@type": "Organization",
    "name": "DevBlog",
  },
  "datePublished": post.publishedAt,
  "dateModified": post.updatedAt,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `${Astro.site}blog/${post.slug}`,
  },
};

// Obtener posts relacionados
let relatedPosts: BlogPost[] = [];
try {
  relatedPosts = await BlogService.getRelatedPosts(
    post._id || '',
    post.category._id || '',
    3
  );
} catch (error) {
  console.error('Error fetching related posts:', error);
}

// Obtener posts para navegación (anterior y siguiente)
let navigationPosts: { prev: BlogPost | null; next: BlogPost | null } = { prev: null, next: null };
try {
  const allPosts = await BlogService.getPublishedPosts();
  const currentIndex = allPosts.findIndex(p => p.slug === post.slug);
  
  const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
  const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
    
  navigationPosts = { prev: prevPost, next: nextPost };
} catch (error) {
  console.error('Error fetching navigation posts:', error);
}
---

<BaseLayout
  title={post.metaDescription ? `${post.title} | DevBlog` : post.title}
  description={post.metaDescription || post.excerpt}
  keywords={post.metaKeywords?.split(',') || []}
  ogImage={post.featuredImage}
  structuredData={structuredData}
>
  <!-- Barra de progreso de lectura -->
  <ReadingProgress />
  
  <article class="max-w-4xl mx-auto px-4 py-8">
    <!-- Encabezado del post -->
    <PostHeader post={post} />
    
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8 mt-8">
      <!-- Tabla de contenidos (solo en desktop) -->
      <aside class="hidden lg:block lg:col-span-1">
        <div class="sticky top-8">
          <TableOfContents content={post.content} />
        </div>
      </aside>
      
      <!-- Contenido principal -->
      <div class="lg:col-span-3">
        <PostContent content={post.content} />
        
        <!-- Footer del post -->
        <PostFooter post={post} />
        
        <!-- Navegación entre posts -->
        <PostNavigation prev={navigationPosts.prev} next={navigationPosts.next} />
        
        <!-- Posts relacionados -->
        {relatedPosts.length > 0 && (
          <RelatedPosts posts={relatedPosts} />
        )}
        
        <!-- Comentarios -->
        <Comments post={post} />
      </div>
    </div>
  </article>
  
  <!-- Botón volver arriba -->
  <BackToTop />
</BaseLayout>
