---
import { generateHeadingId } from '../../lib/utils';

export interface Props {
  content: string;
}

const { content } = Astro.props;

// Función para procesar el contenido Markdown a HTML
// En una implementación real, aquí usarías una librería como marked, markdown-it, etc.
function processMarkdown(markdown: string): string {
  // Esta es una implementación básica - deberías usar una librería real
  return markdown
    .replace(/^# (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-1');
      return `<h1 id="${id}" class="heading-1" style="scroll-margin-top: 100px;">${text}</h1>`;
    })
    .replace(/^## (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-2');
      return `<h2 id="${id}" class="heading-2" style="scroll-margin-top: 100px;">${text}</h2>`;
    })
    .replace(/^### (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-3');
      return `<h3 id="${id}" class="heading-3" style="scroll-margin-top: 100px;">${text}</h3>`;
    })
    .replace(/^#### (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-4');
      return `<h4 id="${id}" class="heading-4" style="scroll-margin-top: 100px;">${text}</h4>`;
    })
    .replace(/^##### (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-5');
      return `<h5 id="${id}" class="heading-5" style="scroll-margin-top: 100px;">${text}</h5>`;
    })
    .replace(/^###### (.*$)/gm, (match, text) => {
      const id = generateHeadingId(text, 'heading-6');
      return `<h6 id="${id}" class="heading-6" style="scroll-margin-top: 100px;">${text}</h6>`;
    })
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`([^`]+)`/g, '<code class="inline-code">$1</code>')
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="prose-link">$1</a>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/^(.*)$/gm, '<p>$1</p>')
    .replace(/<p><h([1-6])/g, '<h$1')
    .replace(/<\/h([1-6])><\/p>/g, '</h$1>');
}

const processedContent = processMarkdown(content);
---

<div class="prose prose-lg prose-gray dark:prose-invert max-w-none">
  <div set:html={processedContent} />
</div>

<!-- Estilos personalizados para el contenido -->
<style>
  .prose {
    @apply text-gray-800 dark:text-gray-200 leading-relaxed;
  }

  .prose :global(.heading-1) {
    @apply text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mt-12 mb-6 leading-tight border-b border-gray-200 dark:border-gray-700 pb-4;
    transition: all 0.3s ease;
  }

  .prose :global(.heading-2) {
    @apply text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mt-10 mb-5 leading-tight;
    transition: all 0.3s ease;
  }

  .prose :global(.heading-3) {
    @apply text-xl md:text-2xl font-semibold text-gray-900 dark:text-white mt-8 mb-4 leading-tight;
    transition: all 0.3s ease;
  }

  .prose :global(.heading-4) {
    @apply text-lg md:text-xl font-semibold text-gray-900 dark:text-white mt-6 mb-3 leading-tight;
    transition: all 0.3s ease;
  }

  .prose :global(.heading-5) {
    @apply text-base md:text-lg font-semibold text-gray-900 dark:text-white mt-6 mb-3 leading-tight;
    transition: all 0.3s ease;
  }

  .prose :global(.heading-6) {
    @apply text-sm md:text-base font-semibold text-gray-900 dark:text-white mt-6 mb-3 leading-tight uppercase tracking-wider;
    transition: all 0.3s ease;
  }

  .prose :global(p) {
    @apply mb-6 text-base md:text-lg leading-relaxed;
  }

  .prose :global(strong) {
    @apply font-semibold text-gray-900 dark:text-white;
  }

  .prose :global(em) {
    @apply italic;
  }

  .prose :global(.inline-code) {
    @apply px-2 py-1 bg-gray-100 dark:bg-gray-800 text-primary-600 dark:text-primary-400 rounded-md text-sm font-mono border;
  }

  .prose :global(.prose-link) {
    @apply text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 underline decoration-2 underline-offset-2 transition-colors;
  }

  .prose :global(blockquote) {
    @apply border-l-4 border-primary-500 pl-6 py-2 my-8 bg-primary-50 dark:bg-primary-900/20 italic text-gray-700 dark:text-gray-300 rounded-r-lg;
  }

  .prose :global(ul) {
    @apply list-disc list-inside mb-6 space-y-2;
  }

  .prose :global(ol) {
    @apply list-decimal list-inside mb-6 space-y-2;
  }

  .prose :global(li) {
    @apply text-base md:text-lg leading-relaxed;
  }

  .prose :global(pre) {
    @apply bg-gray-900 dark:bg-gray-950 text-gray-100 p-6 rounded-xl overflow-x-auto my-8 border;
  }

  .prose :global(code) {
    @apply font-mono text-sm;
  }

  .prose :global(table) {
    @apply w-full border-collapse my-8 bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-sm;
  }

  .prose :global(thead) {
    @apply bg-gray-50 dark:bg-gray-700;
  }

  .prose :global(th) {
    @apply px-6 py-4 text-left font-semibold text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-600;
  }

  .prose :global(td) {
    @apply px-6 py-4 text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600;
  }

  .prose :global(tr:last-child td) {
    @apply border-b-0;
  }

  .prose :global(img) {
    @apply rounded-xl shadow-lg my-8 w-full;
  }

  .prose :global(hr) {
    @apply border-gray-200 dark:border-gray-700 my-12;
  }

  /* Estilos para resaltado de sintaxis */
  .prose :global(.highlight) {
    @apply bg-yellow-200 dark:bg-yellow-800 px-1 rounded;
  }

  /* Estilos para notas y alertas */
  .prose :global(.note) {
    @apply p-4 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg my-6;
  }

  .prose :global(.warning) {
    @apply p-4 bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 rounded-r-lg my-6;
  }

  .prose :global(.error) {
    @apply p-4 bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 rounded-r-lg my-6;
  }

  .prose :global(.success) {
    @apply p-4 bg-green-50 dark:bg-green-900/20 border-l-4 border-green-500 rounded-r-lg my-6;
  }
</style>

<script>
  // Agregar funcionalidad para copiar código
  document.addEventListener('DOMContentLoaded', () => {
    const codeBlocks = document.querySelectorAll('pre code');
    
    codeBlocks.forEach((block) => {
      const pre = block.parentElement;
      if (pre) {
        // Crear botón de copiar
        const copyButton = document.createElement('button');
        copyButton.innerHTML = '📋 Copiar';
        copyButton.className = 'absolute top-2 right-2 px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white text-sm rounded transition-colors';
        
        // Hacer el pre relativo para posicionar el botón
        pre.style.position = 'relative';
        pre.appendChild(copyButton);
        
        // Agregar funcionalidad de copia
        copyButton.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(block.textContent || '');
            copyButton.innerHTML = '✅ Copiado';
            setTimeout(() => {
              copyButton.innerHTML = '📋 Copiar';
            }, 2000);
          } catch (err) {
            console.error('Error al copiar:', err);
            copyButton.innerHTML = '❌ Error';
            setTimeout(() => {
              copyButton.innerHTML = '📋 Copiar';
            }, 2000);
          }
        });
      }
    });

    // Smooth scroll para enlaces internos
    const internalLinks = document.querySelectorAll('a[href^="#"]');
    internalLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        const target = targetId ? document.getElementById(targetId) : null;
        
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>
