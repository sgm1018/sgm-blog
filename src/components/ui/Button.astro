---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  target?: string;
  class?: string;
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
}

const { 
  variant = 'primary',
  size = 'md',
  href,
  target,
  class: className,
  disabled = false,
  type = 'button',
  ...rest
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variants = {
  primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
  secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500 dark:bg-gray-800 dark:text-gray-100 dark:hover:bg-gray-700',
  outline: 'border border-primary-600 text-primary-600 hover:bg-primary-50 focus:ring-primary-500 dark:border-primary-400 dark:text-primary-400 dark:hover:bg-primary-900/20',
  ghost: 'text-gray-600 hover:bg-gray-100 focus:ring-gray-500 dark:text-gray-400 dark:hover:bg-gray-800'
};

const sizes = {
  sm: 'px-3 py-1.5 text-sm rounded-md',
  md: 'px-4 py-2 text-base rounded-lg',
  lg: 'px-6 py-3 text-lg rounded-xl'
};

const classes = [baseClasses, variants[variant], sizes[size], className].filter(Boolean).join(' ');  // boolean hace que se eliminen los valores falsy como undefined o null

const Element = href ? 'a' : 'button';
---

<Element
  class={classes}
  href={href}
  target={target}
  disabled={disabled}
  type={href ? undefined : type}
  {...rest}
>
  <slot />
</Element>